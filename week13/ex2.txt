Recovery:
1) Thhrough preemption:
Can be used when it is possible to temporarily take a resource away from its current owner and give it to another process.
However, recovering this way is frequently difficult or impossible due to the difficulty to determine which processes have resources
that can easily be taken back.
2) Through rollback:
A process that owns a needed resource is rolled back to a point in time before it acquired that resource by starting at one
of its earlier checkpoints. Can be used when deadlocks are very likely but this strategy takes much memory space and time.
3) Through Killing Processes:
The crudest but simplest way to break a deadlock. Where possible, it is best to kill a process that can be rerun from the beginning
with no ill effects. It is difficult to determine such a process though.

Avoidance:
Avoidance is possible only if certain information is available in advance.

Prevention:
Deadlock avoidance is essentially impossible, because it requires information about future requests, which is not known.
So, it's the best strategy to prevent the deadlocks by taking into consideration the 4 conditions for deadlocks to appear.
